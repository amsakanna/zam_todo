// Mocks generated by Mockito 5.0.16 from annotations
// in zam_todo/test/_mocks/infrastructure.dart.
// Do not manually edit this file.

// ignore_for_file: null_argument_to_non_null_type, unnecessary_overrides

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:zam_core/zam_core.dart' as _i5;
import 'package:zam_todo/src/domain/ports/database.dart' as _i2;
import 'package:zam_todo/src/domain/ports/table.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i2.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize(List<_i4.Table<_i5.Entity<_i5.Model>>>? table) =>
      (super.noSuchMethod(Invocation.method(#initialize, [table]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> exists<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table, String? key) =>
      (super.noSuchMethod(Invocation.method(#exists, [table, key]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<ENTITY> get<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table, String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [table, key]),
          returnValue: Future<ENTITY>.value(null)) as _i3.Future<ENTITY>);
  @override
  _i3.Future<Iterable<ENTITY>> getAll<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table) =>
      (super.noSuchMethod(Invocation.method(#getAll, [table]),
              returnValue: Future<Iterable<ENTITY>>.value(<ENTITY>[]))
          as _i3.Future<Iterable<ENTITY>>);
  @override
  _i3.Stream<Iterable<ENTITY>> streamAll<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table) =>
      (super.noSuchMethod(Invocation.method(#streamAll, [table]),
              returnValue: Stream<Iterable<ENTITY>>.empty())
          as _i3.Stream<Iterable<ENTITY>>);
  @override
  _i3.Future<ENTITY> add<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table, ENTITY? data) =>
      (super.noSuchMethod(Invocation.method(#add, [table, data]),
          returnValue: Future<ENTITY>.value(null)) as _i3.Future<ENTITY>);
  @override
  _i3.Future<ENTITY> update<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table, ENTITY? data) =>
      (super.noSuchMethod(Invocation.method(#update, [table, data]),
          returnValue: Future<ENTITY>.value(null)) as _i3.Future<ENTITY>);
  @override
  _i3.Future<ENTITY> remove<ENTITY extends _i5.Entity<_i5.Model>>(
          _i4.Table<ENTITY>? table, String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [table, key]),
          returnValue: Future<ENTITY>.value(null)) as _i3.Future<ENTITY>);
  @override
  String toString() => super.toString();
}
